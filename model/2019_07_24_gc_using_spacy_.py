# -*- coding: utf-8 -*-
"""2019-07-24 GC Using Spacy .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYHnVmf4-8fl-0W6Lsiv86a2mcUBkQRp
"""

# Commented out IPython magic to ensure Python compatibility.
import spacy 
import gcsfs
import re
import pandas as pd
import numpy as np
import sys
import pyLDAvis
import gensim
import os
import nltk
from gensim.models.wrappers import LdaMallet
import gensim.downloader as api
from gensim.models import Word2Vec
from gensim.utils import simple_preprocess
from nltk.corpus import stopwords
import gensim.corpora as corpora
from gensim.models import CoherenceModel
from pprint import pprint
import pyLDAvis.gensim 
import matplotlib.pyplot as plt
import time
# %matplotlib inline

# Step one is just cleaning the data. Getting rid of non english words, gettting words broken down to their stem
# Identifying the end of sentences and removing connectors which don't really add value in categorization/classification

#nltk.download('stopwords')

# Initialize spacy 'xx' model, keeping only tagger component (for efficiency) - this is a multilingual model
# changed to 'en' model, which is the english model because the xx model returned an empty corpus after lemmatization (below)

nlp = spacy.load('en',disable=['parser', 'ner'])

#making stop words available under variable stop_words
nltk.download('stopwords')
#stop_words = stopwords('english')
#stop_words.extend(['from', 'subject', 're', 'edu', 'use'])

stop_words = stopwords.words('english')

#only 16000, maximum download size for BQ
path = 'gs://unity-ads-bi-data-ephemeral-prd/sandra/csv/results-20190725-151202.csv'

# Reading loading/data
data = pd.read_csv(path)

dataset = api.load('text8')
model = Word2Vec(dataset)

descriptions = data.description.values.tolist()

# Remove new line characters
game_names = [re.sub('\s+', ' ', sent) for sent in descriptions]

#Remove non letter characters 
game_names = [re.sub('[^a-zA-Z]', ' ', sent) for sent in descriptions]

# Remove distracting single quotes
game_names = [re.sub("\'", "", sent) for sent in descriptions]

pprint(descriptions[:1])

def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations

data_words = list(sent_to_words(descriptions))

print(data_words[:1])

#creating bigrams and trigrams which are words that simultaneously occur freuqently eg. oil leak, garbage can are bigrams

# Build the bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[data_words], threshold=100)  

# Faster way to get a sentence clubbed as a trigram/bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)

# See trigram example
print(trigram_mod[bigram_mod[data_words[1]]])

# Define functions for stopwords, bigrams, trigrams and lemmatization
# stopwords are like 'is' 'the' 'are' 
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

#difference between spacy & nltk lemmatization > stemming
def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

# Remove Stop Words
data_words_nostops = remove_stopwords(data_words)

# Form Bigrams
data_words_bigrams = make_bigrams(data_words_nostops)

# Do lemmatization keeping only nouns, adjectives, verbs and adjectives 
data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:1])

# Create Dictionary
#creates a token for each word
id2word = corpora.Dictionary(data_lemmatized)

# Create Corpus 
texts = data_lemmatized

# Term Document Frequency and gensim creates a unique id for each word in the document
corpus = [id2word.doc2bow(text) for text in texts]

# This corpus is a mapping of (word_id, word_frequency)
print(corpus[:1])

# Human readable format of corpus (term-frequency)
[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]

"""**LDA vs Clustering**
When using clustering, each topic is allocated to one specific cluster. When using an LDA model, there is sort of an allowance for a topic
to overlap between clusters. Why is this helpful? This is helpful because in the LDA you can more accuractely categorize a document(group of words
eg. a game name or a description) based on the combination of words in that document and the key words in a specific cluster. So if a word like 
can is in one cluster, the word trash can would go to that cluster even if that cluster was a cluster of types of jars whereas when using LDA,
the word trashcan would go to the cluster of type of garbage cans because it is taken in context with the words around it. 

**Measuring the Accuracy of our model**
That is also a difference betweeen the two types of ways to calculate the coherence of your LDA model, 
in the LDA we use here is the c_v as the measure of coherence which uses allows us to compare words in context rather than compare words with the word
before and the word after which doesn't paint a very clear picture of context

Building the LDA (latent dirichlet allocation) model - this is version one which we will fine tune down the line
The LDA model is a probablistic model that assigns two probabilities in the form of a matrix 
1. The probability of a part (a word/phrase) appearing in a topic and 
2. The probability of a topic appearing in a document (an aggregate or words/phrases)

**Hyperparameters**
Alpha and Beta are two hyperparameters that help fine tune the dirichlet distribution (which is a distribution of distributions and the the main probability distribution underlying the LDA) and assign probability values to the topic to word matrix.
1. The alpha hyperparameter controls the mixture of topics for any given document. 
Decrease it, and the documents will likely have less of a mixture of topics. 
Increase it, and the documents will likely have more of a mixture of topics.
2. The beta hyperparameter controls the distribution of words per topic. 
Decrease it and the topics will likely have less words. 
Increase it, and the topics will likely have more words
3. update_every determines how often the model parameters should be updated (in this case after every chunk)
4. chunksize is the number of documents to be used in each training chunk 
5. passes is total number of training passes
Read more on the LDA here https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation
"""

lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=20, 
                                           random_state=100, 
                                           update_every=1, 
                                           chunksize=100, 
                                           passes=8,  
                                           alpha='auto',
                                           per_word_topics=True)

# Print the Keyword in the topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]

# Compute Perplexity
print('\nPerplexity: ', lda_model.log_perplexity(corpus))  # a measure of how good the model is. lower the better.

# Compute Coherence Score
coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('\nCoherence Score: ', coherence_lda)

#visualization of the frequency of words broken by topic 
start = time.time()
pyLDAvis.enable_notebook()
vis = pyLDAvis.gensim.prepare(lda_model, corpus, id2word)
vis

end = time.time()

print(end - start)

# Download File: http://mallet.cs.umass.edu/dist/mallet-2.0.8.zip
# The mallet path downloads mallet which is a package containing tools for document classification
# Here we are using it for topic modeling since our data is not labeled we are using inference of topic distribution on new, 
# from the mallet package unseen documents
mallet_path = '/home/iriswang/mallet-2.0.8/bin/mallet'

def compute_coherence_values(dictionary, corpus, texts, limit, start, step):
    """
    Compute c_v coherence for various number of topics

    Parameters are as follows 
    dictionary : Gensim dictionary (downloaded above)
    corpus : Gensim corpus (the mapping of word_id, word_frequency we created above after lemmatization)
    texts : List of input texts (data to be analyzed)
    limit : Max num of topics (for now we use an educated guess or random number of topics, we will optimize for this
    value below)

    Returns:
    -------
    model_list : List of LDA topic models (number, not currently labeled)
    coherence_values : Coherence values corresponding to the LDA model with respective number of topics
    """
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        model = gensim.models.wrappers.LdaMallet(mallet_path, corpus=corpus, num_topics=num_topics, id2word=id2word)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')
        coherence_values.append(coherencemodel.get_coherence())
    return model_list, coherence_values

# Can take a long time to run.
#start = time.time()
model_list, coherence_values = compute_coherence_values(dictionary=id2word, corpus=corpus, texts=data_lemmatized, start=2, limit=40, step=4)
#end = time.time()
#print(end - start)

model_list

coherence_values

#using this graph, we can see how many topics we should have
# This graph helps us answer the question beyond which number of topics will the accuracy of our model not improve?
limit=40; start=2; step=4;
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Number of Topics")
plt.ylabel("Coherence score")
plt.legend(("coherence_values"), loc='best')
plt.show()

for m, cv in zip(x, coherence_values):
    print("Num Topics =", m, " has Coherence Value of", round(cv, 4))

ldamallet = gensim.models.wrappers.LdaMallet(mallet_path, corpus=corpus, num_topics=20, id2word=id2word)

# Show Topics
pprint(ldamallet.show_topics(formatted=False))

# Compute Coherence Score
coherence_model_ldamallet = CoherenceModel(model=ldamallet, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_ldamallet = coherence_model_ldamallet.get_coherence()
print('\nCoherence Score: ', coherence_ldamallet)

ldamalletv2 = gensim.models.wrappers.LdaMallet(mallet_path, corpus=corpus, num_topics=14, id2word=id2word)

pprint(ldamalletv2.show_topics(formatted=False))

# Compute Coherence Score
coherence_model_ldamalletv2 = CoherenceModel(model=ldamalletv2, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_ldamalletv2 = coherence_model_ldamalletv2.get_coherence()
print('\nCoherence Score: ', coherence_ldamalletv2)

#see above for the breakdown of what the model variables and parameters do 
lda_model2 = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=14, 
                                           random_state=100,
                                           update_every=1, 
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)

pyLDAvis.enable_notebook()
visualization = pyLDAvis.gensim.prepare(lda_model2, corpus, id2word)
visualization

def format_topics_sentences(ldamodel=lda_model, corpus=corpus, texts=data):
    # Init output
    sent_topics_df = pd.DataFrame()

    # Get main topic in each document
    for i, row in enumerate(ldamodel[corpus]):
        row = sorted(row, key=lambda x: (x[1]), reverse=True)
        # Get the Dominant topic, Perc Contribution and Keywords for each document
        for j, (topic_num, prop_topic) in enumerate(row):
            if j == 0:  # => dominant topic
                wp = ldamodel.show_topic(topic_num)
                topic_keywords = ", ".join([word for word, prop in wp])
                sent_topics_df = sent_topics_df.append(pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True)
            else:
                break
    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']

    # Add original text to the end of the output
    contents = pd.Series(texts)
    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)
    return(sent_topics_df)


df_topic_sents_keywords = format_topics_sentences(ldamodel=lda_model2, corpus=corpus, texts=data)

# Format
df_dominant_topic = df_topic_sents_keywords.reset_index()
df_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords']
#df_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text']

# Show
df_dominant_topic.head(10)

# Group top 5 sentences under each topic
sent_topics_sorteddf_mallet = pd.DataFrame()

sent_topics_outdf_grpd = df_topic_sents_keywords.groupby('Dominant_Topic')

for i, grp in sent_topics_outdf_grpd:
    sent_topics_sorteddf_mallet = pd.concat([sent_topics_sorteddf_mallet, 
                                             grp.sort_values(['Perc_Contribution'], ascending=[0]).head(1)], 
                                            axis=0)

# Reset Index    
sent_topics_sorteddf_mallet.reset_index(drop=True, inplace=True)

# Format
sent_topics_sorteddf_mallet.columns = ['Topic_Num', "Topic_Perc_Contrib", "Keywords"]
#sent_topics_sorteddf_mallet.columns = ['Topic_Num', "Topic_Perc_Contrib", "Keywords", "Text"]

# Show
sent_topics_sorteddf_mallet.head()

# Number of Documents for Each Topic
topic_counts = df_topic_sents_keywords['Dominant_Topic'].value_counts()

# Percentage of Documents for Each Topic
topic_contribution = round(topic_counts/topic_counts.sum(), 4)

# Topic Number and Keywords
topic_num_keywords = df_topic_sents_keywords[['Dominant_Topic', 'Topic_Keywords']]

# Concatenate Column wise
df_dominant_topics = pd.concat([topic_num_keywords, topic_counts, topic_contribution], axis=1)

# Change Column names
df_dominant_topics.columns = ['Dominant_Topic', 'Topic_Keywords', 'Num_Documents', 'Perc_Documents']

# Show
df_dominant_topics